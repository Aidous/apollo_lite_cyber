// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/examples/proto/examples.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/examples/proto/examples.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace examples {
namespace proto {
class SamplesTest1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SamplesTest1> {
} _SamplesTest1_default_instance_;
class ChatterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chatter> {
} _Chatter_default_instance_;
class DriverDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Driver> {
} _Driver_default_instance_;
class ImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Image> {
} _Image_default_instance_;

namespace protobuf_modules_2fexamples_2fproto_2fexamples_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplesTest1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplesTest1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplesTest1, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplesTest1, case_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, lidar_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chatter, content_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Driver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Driver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Driver, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Driver, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Driver, timestamp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
  0,
  3,
  4,
  5,
  1,
  6,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(SamplesTest1)},
  { 9, 18, sizeof(Chatter)},
  { 22, 30, sizeof(Driver)},
  { 33, 45, sizeof(Image)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SamplesTest1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chatter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Driver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/examples/proto/examples.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _SamplesTest1_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Chatter_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Driver_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Image_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SamplesTest1_default_instance_.DefaultConstruct();
  _Chatter_default_instance_.DefaultConstruct();
  _Driver_default_instance_.DefaultConstruct();
  _Image_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%modules/examples/proto/examples.proto\022"
      "\025apollo.examples.proto\"5\n\014SamplesTest1\022\022"
      "\n\nclass_name\030\001 \001(\t\022\021\n\tcase_name\030\002 \001(\t\"S\n"
      "\007Chatter\022\021\n\ttimestamp\030\001 \001(\004\022\027\n\017lidar_tim"
      "estamp\030\002 \001(\004\022\013\n\003seq\030\003 \001(\004\022\017\n\007content\030\004 \001"
      "(\014\"<\n\006Driver\022\017\n\007content\030\001 \001(\t\022\016\n\006msg_id\030"
      "\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\004\"\200\001\n\005Image\022\020\n\010fr"
      "ame_id\030\002 \001(\t\022\030\n\020measurement_time\030\003 \001(\001\022\016"
      "\n\006height\030\004 \001(\r\022\r\n\005width\030\005 \001(\r\022\020\n\010encodin"
      "g\030\006 \001(\t\022\014\n\004step\030\007 \001(\r\022\014\n\004data\030\010 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/examples/proto/examples.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fexamples_2fproto_2fexamples_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SamplesTest1::kClassNameFieldNumber;
const int SamplesTest1::kCaseNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SamplesTest1::SamplesTest1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.examples.proto.SamplesTest1)
}
SamplesTest1::SamplesTest1(const SamplesTest1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  case_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_case_name()) {
    case_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.case_name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.examples.proto.SamplesTest1)
}

void SamplesTest1::SharedCtor() {
  _cached_size_ = 0;
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SamplesTest1::~SamplesTest1() {
  // @@protoc_insertion_point(destructor:apollo.examples.proto.SamplesTest1)
  SharedDtor();
}

void SamplesTest1::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  case_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SamplesTest1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SamplesTest1::descriptor() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SamplesTest1& SamplesTest1::default_instance() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  return *internal_default_instance();
}

SamplesTest1* SamplesTest1::New(::google::protobuf::Arena* arena) const {
  SamplesTest1* n = new SamplesTest1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SamplesTest1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.examples.proto.SamplesTest1)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_class_name()) {
      GOOGLE_DCHECK(!class_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*class_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_case_name()) {
      GOOGLE_DCHECK(!case_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*case_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SamplesTest1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.examples.proto.SamplesTest1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string class_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.examples.proto.SamplesTest1.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string case_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_case_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->case_name().data(), this->case_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.examples.proto.SamplesTest1.case_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.examples.proto.SamplesTest1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.examples.proto.SamplesTest1)
  return false;
#undef DO_
}

void SamplesTest1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.examples.proto.SamplesTest1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.SamplesTest1.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->class_name(), output);
  }

  // optional string case_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->case_name().data(), this->case_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.SamplesTest1.case_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->case_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.examples.proto.SamplesTest1)
}

::google::protobuf::uint8* SamplesTest1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.examples.proto.SamplesTest1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string class_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.SamplesTest1.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_name(), target);
  }

  // optional string case_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->case_name().data(), this->case_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.SamplesTest1.case_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->case_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.examples.proto.SamplesTest1)
  return target;
}

size_t SamplesTest1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.examples.proto.SamplesTest1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string class_name = 1;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional string case_name = 2;
    if (has_case_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->case_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SamplesTest1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.examples.proto.SamplesTest1)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplesTest1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SamplesTest1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.examples.proto.SamplesTest1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.examples.proto.SamplesTest1)
    MergeFrom(*source);
  }
}

void SamplesTest1::MergeFrom(const SamplesTest1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.examples.proto.SamplesTest1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_case_name();
      case_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.case_name_);
    }
  }
}

void SamplesTest1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.examples.proto.SamplesTest1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplesTest1::CopyFrom(const SamplesTest1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.examples.proto.SamplesTest1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplesTest1::IsInitialized() const {
  return true;
}

void SamplesTest1::Swap(SamplesTest1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SamplesTest1::InternalSwap(SamplesTest1* other) {
  class_name_.Swap(&other->class_name_);
  case_name_.Swap(&other->case_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SamplesTest1::GetMetadata() const {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SamplesTest1

// optional string class_name = 1;
bool SamplesTest1::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SamplesTest1::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SamplesTest1::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SamplesTest1::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
const ::std::string& SamplesTest1::class_name() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.SamplesTest1.class_name)
  return class_name_.GetNoArena();
}
void SamplesTest1::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.SamplesTest1.class_name)
}
#if LANG_CXX11
void SamplesTest1::set_class_name(::std::string&& value) {
  set_has_class_name();
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.SamplesTest1.class_name)
}
#endif
void SamplesTest1::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.SamplesTest1.class_name)
}
void SamplesTest1::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.SamplesTest1.class_name)
}
::std::string* SamplesTest1::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.SamplesTest1.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SamplesTest1::release_class_name() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.SamplesTest1.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SamplesTest1::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.SamplesTest1.class_name)
}

// optional string case_name = 2;
bool SamplesTest1::has_case_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SamplesTest1::set_has_case_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SamplesTest1::clear_has_case_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SamplesTest1::clear_case_name() {
  case_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_case_name();
}
const ::std::string& SamplesTest1::case_name() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.SamplesTest1.case_name)
  return case_name_.GetNoArena();
}
void SamplesTest1::set_case_name(const ::std::string& value) {
  set_has_case_name();
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.SamplesTest1.case_name)
}
#if LANG_CXX11
void SamplesTest1::set_case_name(::std::string&& value) {
  set_has_case_name();
  case_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.SamplesTest1.case_name)
}
#endif
void SamplesTest1::set_case_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_case_name();
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.SamplesTest1.case_name)
}
void SamplesTest1::set_case_name(const char* value, size_t size) {
  set_has_case_name();
  case_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.SamplesTest1.case_name)
}
::std::string* SamplesTest1::mutable_case_name() {
  set_has_case_name();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.SamplesTest1.case_name)
  return case_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SamplesTest1::release_case_name() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.SamplesTest1.case_name)
  clear_has_case_name();
  return case_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SamplesTest1::set_allocated_case_name(::std::string* case_name) {
  if (case_name != NULL) {
    set_has_case_name();
  } else {
    clear_has_case_name();
  }
  case_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), case_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.SamplesTest1.case_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chatter::kTimestampFieldNumber;
const int Chatter::kLidarTimestampFieldNumber;
const int Chatter::kSeqFieldNumber;
const int Chatter::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chatter::Chatter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.examples.proto.Chatter)
}
Chatter::Chatter(const Chatter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:apollo.examples.proto.Chatter)
}

void Chatter::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(seq_));
}

Chatter::~Chatter() {
  // @@protoc_insertion_point(destructor:apollo.examples.proto.Chatter)
  SharedDtor();
}

void Chatter::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chatter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chatter::descriptor() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chatter& Chatter::default_instance() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chatter* Chatter::New(::google::protobuf::Arena* arena) const {
  Chatter* n = new Chatter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chatter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.examples.proto.Chatter)
  if (has_content()) {
    GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*content_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chatter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.examples.proto.Chatter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lidar_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lidar_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lidar_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 seq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.examples.proto.Chatter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.examples.proto.Chatter)
  return false;
#undef DO_
}

void Chatter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.examples.proto.Chatter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional uint64 lidar_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lidar_timestamp(), output);
  }

  // optional uint64 seq = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seq(), output);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.examples.proto.Chatter)
}

::google::protobuf::uint8* Chatter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.examples.proto.Chatter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint64 lidar_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lidar_timestamp(), target);
  }

  // optional uint64 seq = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seq(), target);
  }

  // optional bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.examples.proto.Chatter)
  return target;
}

size_t Chatter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.examples.proto.Chatter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 lidar_timestamp = 2;
    if (has_lidar_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lidar_timestamp());
    }

    // optional uint64 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chatter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.examples.proto.Chatter)
  GOOGLE_DCHECK_NE(&from, this);
  const Chatter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chatter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.examples.proto.Chatter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.examples.proto.Chatter)
    MergeFrom(*source);
  }
}

void Chatter::MergeFrom(const Chatter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.examples.proto.Chatter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      lidar_timestamp_ = from.lidar_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chatter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.examples.proto.Chatter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chatter::CopyFrom(const Chatter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.examples.proto.Chatter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chatter::IsInitialized() const {
  return true;
}

void Chatter::Swap(Chatter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chatter::InternalSwap(Chatter* other) {
  content_.Swap(&other->content_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(lidar_timestamp_, other->lidar_timestamp_);
  std::swap(seq_, other->seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chatter::GetMetadata() const {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chatter

// optional uint64 timestamp = 1;
bool Chatter::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chatter::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void Chatter::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chatter::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Chatter::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Chatter.timestamp)
  return timestamp_;
}
void Chatter::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Chatter.timestamp)
}

// optional uint64 lidar_timestamp = 2;
bool Chatter::has_lidar_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chatter::set_has_lidar_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void Chatter::clear_has_lidar_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chatter::clear_lidar_timestamp() {
  lidar_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_lidar_timestamp();
}
::google::protobuf::uint64 Chatter::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Chatter.lidar_timestamp)
  return lidar_timestamp_;
}
void Chatter::set_lidar_timestamp(::google::protobuf::uint64 value) {
  set_has_lidar_timestamp();
  lidar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Chatter.lidar_timestamp)
}

// optional uint64 seq = 3;
bool Chatter::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Chatter::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void Chatter::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void Chatter::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
  clear_has_seq();
}
::google::protobuf::uint64 Chatter::seq() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Chatter.seq)
  return seq_;
}
void Chatter::set_seq(::google::protobuf::uint64 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Chatter.seq)
}

// optional bytes content = 4;
bool Chatter::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chatter::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void Chatter::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chatter::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& Chatter::content() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Chatter.content)
  return content_.GetNoArena();
}
void Chatter::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Chatter.content)
}
#if LANG_CXX11
void Chatter::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.Chatter.content)
}
#endif
void Chatter::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.Chatter.content)
}
void Chatter::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.Chatter.content)
}
::std::string* Chatter::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.Chatter.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chatter::release_content() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.Chatter.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chatter::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.Chatter.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Driver::kContentFieldNumber;
const int Driver::kMsgIdFieldNumber;
const int Driver::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Driver::Driver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.examples.proto.Driver)
}
Driver::Driver(const Driver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&msg_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:apollo.examples.proto.Driver)
}

void Driver::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&msg_id_) + sizeof(timestamp_));
}

Driver::~Driver() {
  // @@protoc_insertion_point(destructor:apollo.examples.proto.Driver)
  SharedDtor();
}

void Driver::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Driver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Driver::descriptor() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Driver& Driver::default_instance() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  return *internal_default_instance();
}

Driver* Driver::New(::google::protobuf::Arena* arena) const {
  Driver* n = new Driver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Driver::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.examples.proto.Driver)
  if (has_content()) {
    GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*content_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&msg_id_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&msg_id_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Driver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.examples.proto.Driver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.examples.proto.Driver.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.examples.proto.Driver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.examples.proto.Driver)
  return false;
#undef DO_
}

void Driver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.examples.proto.Driver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.Driver.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.examples.proto.Driver)
}

::google::protobuf::uint8* Driver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.examples.proto.Driver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.Driver.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.examples.proto.Driver)
  return target;
}

size_t Driver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.examples.proto.Driver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Driver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.examples.proto.Driver)
  GOOGLE_DCHECK_NE(&from, this);
  const Driver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Driver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.examples.proto.Driver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.examples.proto.Driver)
    MergeFrom(*source);
  }
}

void Driver::MergeFrom(const Driver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.examples.proto.Driver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Driver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.examples.proto.Driver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Driver::CopyFrom(const Driver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.examples.proto.Driver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Driver::IsInitialized() const {
  return true;
}

void Driver::Swap(Driver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Driver::InternalSwap(Driver* other) {
  content_.Swap(&other->content_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Driver::GetMetadata() const {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Driver

// optional string content = 1;
bool Driver::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Driver::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void Driver::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void Driver::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& Driver::content() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Driver.content)
  return content_.GetNoArena();
}
void Driver::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Driver.content)
}
#if LANG_CXX11
void Driver::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.Driver.content)
}
#endif
void Driver::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.Driver.content)
}
void Driver::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.Driver.content)
}
::std::string* Driver::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.Driver.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Driver::release_content() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.Driver.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Driver::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.Driver.content)
}

// optional uint64 msg_id = 2;
bool Driver::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Driver::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Driver::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Driver::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
::google::protobuf::uint64 Driver::msg_id() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Driver.msg_id)
  return msg_id_;
}
void Driver::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Driver.msg_id)
}

// optional uint64 timestamp = 3;
bool Driver::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Driver::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void Driver::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Driver::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Driver::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Driver.timestamp)
  return timestamp_;
}
void Driver::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Driver.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kFrameIdFieldNumber;
const int Image::kMeasurementTimeFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kEncodingFieldNumber;
const int Image::kStepFieldNumber;
const int Image::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.examples.proto.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoding()) {
    encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&measurement_time_) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:apollo.examples.proto.Image)
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&measurement_time_, 0, reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&measurement_time_) + sizeof(step_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:apollo.examples.proto.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.examples.proto.Image)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_frame_id()) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_encoding()) {
      GOOGLE_DCHECK(!encoding_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*encoding_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&measurement_time_, 0, reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&measurement_time_) + sizeof(step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.examples.proto.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.examples.proto.Image.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encoding = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encoding().data(), this->encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.examples.proto.Image.encoding");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 step = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.examples.proto.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.examples.proto.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.examples.proto.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.Image.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_id(), output);
  }

  // optional double measurement_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->measurement_time(), output);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // optional string encoding = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), this->encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.Image.encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encoding(), output);
  }

  // optional uint32 step = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->step(), output);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.examples.proto.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.examples.proto.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.Image.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_id(), target);
  }

  // optional double measurement_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->measurement_time(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // optional string encoding = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), this->encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.examples.proto.Image.encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->encoding(), target);
  }

  // optional uint32 step = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->step(), target);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.examples.proto.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.examples.proto.Image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string encoding = 6;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoding());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional double measurement_time = 3;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 step = 7;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.examples.proto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.examples.proto.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.examples.proto.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.examples.proto.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_encoding();
      encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_ = from.step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.examples.proto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.examples.proto.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  frame_id_.Swap(&other->frame_id_);
  encoding_.Swap(&other->encoding_);
  data_.Swap(&other->data_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(step_, other->step_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fexamples_2fproto_2fexamples_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional string frame_id = 2;
bool Image::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Image::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Image::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Image::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
const ::std::string& Image::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.frame_id)
  return frame_id_.GetNoArena();
}
void Image::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.frame_id)
}
#if LANG_CXX11
void Image::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.Image.frame_id)
}
#endif
void Image::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.Image.frame_id)
}
void Image::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.Image.frame_id)
}
::std::string* Image::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.Image.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.Image.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.Image.frame_id)
}

// optional double measurement_time = 3;
bool Image::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Image::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Image::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Image::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
double Image::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.measurement_time)
  return measurement_time_;
}
void Image::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.measurement_time)
}

// optional uint32 height = 4;
bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Image::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void Image::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.height)
  return height_;
}
void Image::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.height)
}

// optional uint32 width = 5;
bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Image::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void Image::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.width)
  return width_;
}
void Image::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.width)
}

// optional string encoding = 6;
bool Image::has_encoding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Image::set_has_encoding() {
  _has_bits_[0] |= 0x00000002u;
}
void Image::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000002u;
}
void Image::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoding();
}
const ::std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.encoding)
  return encoding_.GetNoArena();
}
void Image::set_encoding(const ::std::string& value) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.encoding)
}
#if LANG_CXX11
void Image::set_encoding(::std::string&& value) {
  set_has_encoding();
  encoding_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.Image.encoding)
}
#endif
void Image::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.Image.encoding)
}
void Image::set_encoding(const char* value, size_t size) {
  set_has_encoding();
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.Image.encoding)
}
::std::string* Image::mutable_encoding() {
  set_has_encoding();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.Image.encoding)
  return encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.Image.encoding)
  clear_has_encoding();
  return encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_encoding(::std::string* encoding) {
  if (encoding != NULL) {
    set_has_encoding();
  } else {
    clear_has_encoding();
  }
  encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.Image.encoding)
}

// optional uint32 step = 7;
bool Image::has_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Image::set_has_step() {
  _has_bits_[0] |= 0x00000040u;
}
void Image::clear_has_step() {
  _has_bits_[0] &= ~0x00000040u;
}
void Image::clear_step() {
  step_ = 0u;
  clear_has_step();
}
::google::protobuf::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.step)
  return step_;
}
void Image::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.step)
}

// optional bytes data = 8;
bool Image::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Image::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:apollo.examples.proto.Image.data)
  return data_.GetNoArena();
}
void Image::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.examples.proto.Image.data)
}
#if LANG_CXX11
void Image::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.examples.proto.Image.data)
}
#endif
void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.examples.proto.Image.data)
}
void Image::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.examples.proto.Image.data)
}
::std::string* Image::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.examples.proto.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:apollo.examples.proto.Image.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.examples.proto.Image.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace examples
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
